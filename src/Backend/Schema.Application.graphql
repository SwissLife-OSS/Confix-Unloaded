extend type Mutation {
  # creates a new application
  addApplication(input: AddApplicationInput!): AddApplicationPayload!
  
  # changes the name of the application
  renameApplication(input: RenameApplicationInput!): RenameApplicationPayload!

  # adds one new application parts to the application
  addApplicationPart(input: AddApplicationPartInput!): AddApplicationPartPayload!
}

type Application {
  id: ID!
  name: String!
  parts: [ApplicationPart!]!
}

type ApplicationPart {
  id: ID!
  name: String!
  application: Application!
  components: [Component]
}

type Settings {
  component: Component
}

type Component {
  id: ID!
  name: String!
  schema: String
  state: ComponentState!
}

input AddApplicationInput {
  name: String!
  parts: [String!]
}

type AddApplicationPayload {
  application: Application
  query: Query!
}

union AddApplicationError = ApplicationNameTaken

input RenameApplicationInput {
  id: ID!
  name: String!
}

type RenameApplicationPayload {
  application: Application
  query: Query!
}

union RenameApplicationError = ApplicationNameTaken

input AddApplicationPartInput {
  applicationId: ID!
  name: String!
}

type AddApplicationPartPayload {
  application: Application
  applicationPart: ApplicationPart
  query: Query!
}

type ApplicationNameTaken : UserError {
  message: String!
  code: String!
}

interface UserError {
  message: String!
  code: String!
}

