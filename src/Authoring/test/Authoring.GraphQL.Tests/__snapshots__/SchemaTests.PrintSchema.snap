schema {
  query: Query
  mutation: Mutation
}

interface ApplicationChange implements Change {
  application: Application
  applicationVersion: Int!
  kind: String!
}

interface ApplicationPartChange implements ApplicationChange & Change {
  part: ApplicationPart
  partVersion: Int!
  application: Application
  applicationVersion: Int!
  kind: String!
}

interface ApplicationPartComponentChange implements ApplicationPartChange & ApplicationChange & Change {
  partComponent: ApplicationPartComponent
  partComponentVersion: Int!
  part: ApplicationPart
  partVersion: Int!
  application: Application
  applicationVersion: Int!
  kind: String!
}

interface Change {
  kind: String!
}

interface ComponentChange implements Change {
  component: Component
  componentVersion: Int!
  kind: String!
}

interface IUserError {
  code: String!
  message: String!
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

interface VariableChange implements Change {
  variable: Variable
  variableVersion: Int!
  kind: String!
}

type AddComponentToApplicationPartChange implements ApplicationPartComponentChange & ApplicationPartChange & ApplicationChange & Change {
  kind: String!
  application: Application
  applicationVersion: Int!
  part: ApplicationPart
  partVersion: Int!
  partComponent: ApplicationPartComponent
  partComponentVersion: Int!
  addedComponent: ApplicationPartComponent!
}

type AddComponentsToApplicationPartPayload {
  applicationPart: ApplicationPart
  errors: [AddComponentsToApplicationPartError!]
  query: Query!
}

type AddPartToApplicationChange implements ApplicationPartChange & ApplicationChange & Change {
  kind: String!
  application: Application
  applicationVersion: Int!
  part: ApplicationPart
  partVersion: Int!
  addedPart: ApplicationPart!
}

type AddPartToApplicationPayload {
  application: Application
  errors: [AddPartToApplicationError!]
  query: Query!
}

type Application implements Node {
  id: ID!
  name: String!
  namespace: String!
  version: Int!
  parts: [ApplicationPart!]!
  variableValues: [VariableValue!]!
  changeLog: [ChangeLog!]!
}

type ApplicationIdInvalid implements IUserError {
  code: String!
  message: String!
  applicationId: ID!
}

type ApplicationNameTaken implements IUserError {
  applicationName: String!
  code: String!
  message: String!
}

type ApplicationNotFoundError implements IUserError {
  applicationId: UUID!
  code: String!
  message: String!
}

type ApplicationPart implements Node {
  id: ID!
  name: String!
  version: Int!
  components: [ApplicationPartComponent!]!
  application: Application
  variableValues: [VariableValue!]!
  changeLog: [ChangeLog!]!
  publishedVersions("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): PublishedVersionsConnection
  deployments("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): DeploymentsConnection
  publishApplicationPartById("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): PublishApplicationPartByIdConnection
}

type ApplicationPartComponent {
  id: ID!
  version: Int!
  definition: Component!
  applicationPart: ApplicationPart
  values(version: Int): String
  changeLog: [ChangeLog!]!
}

type ApplicationPartComponentNotFoundError implements IUserError {
  componentPartId: UUID!
  code: String!
  message: String!
}

type ApplicationPartComponentValuesChange implements ApplicationPartComponentChange & ApplicationPartChange & ApplicationChange & Change {
  kind: String!
  application: Application
  applicationVersion: Int!
  part: ApplicationPart
  partVersion: Int!
  partComponent: ApplicationPartComponent
  partComponentVersion: Int!
  values: String
}

type ApplicationPartIdInvalid implements IUserError {
  code: String!
  message: String!
  applicationPartId: ID!
}

type ApplicationPartNameTaken implements IUserError {
  applicationName: String!
  code: String!
  message: String!
}

type ApplicationPartNotFoundError implements IUserError {
  applicationPartId: UUID!
  code: String!
  message: String!
}

"A connection to a list of items."
type ApplicationsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ApplicationsEdge!]
  "A flattened list of the nodes."
  nodes: [Application!]
}

"An edge in a connection."
type ApplicationsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Application!
}

type ChangeLog {
  id: ID!
  change: Change!
  modifiedBy: UserInfo!
  modifiedAt: DateTime!
}

type ClaimVersionFailedError implements IUserError {
  message: String!
  code: String!
}

type ClaimVersionPayload {
  claimedVersion: ClaimedVersion
  errors: [ClaimVersionError!]
  query: Query!
}

type ClaimedVersion {
  id: ID!
  gitVersion: String!
  claimedAt: DateTime!
  application: Application
  applicationPart: ApplicationPart
  environment: Environment
  publishedApplicationPart: PublishedApplicationPart
  token: String
}

"A connection to a list of items."
type ClaimedVersionsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ClaimedVersionsEdge!]
  "A flattened list of the nodes."
  nodes: [ClaimedVersion!]
}

"An edge in a connection."
type ClaimedVersionsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: ClaimedVersion!
}

type Component implements Node {
  id: ID!
  name: String!
  namespace: String!
  version: Int!
  state: ComponentState!
  changeLog: [ChangeLog!]!
  schemaSdl: SDL
  schema: Any
  values: Any
  defaults: Any
  schemaViolations: [SchemaViolation!]!
}

type ComponentNotFoundError implements IUserError {
  componentId: UUID!
  code: String!
  message: String!
}

type ComponentSchemaChange implements ComponentChange & Change {
  kind: String!
  component: Component
  componentVersion: Int!
  schema: String!
}

type ComponentValuesChange implements ComponentChange & Change {
  kind: String!
  component: Component
  componentVersion: Int!
  values: String!
}

"A connection to a list of items."
type ComponentsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ComponentsEdge!]
  "A flattened list of the nodes."
  nodes: [Component!]
}

"An edge in a connection."
type ComponentsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Component!
}

type CreateApplicationChange implements ApplicationChange & Change {
  kind: String!
  application: Application
  applicationVersion: Int!
}

type CreateApplicationPayload {
  application: Application
  errors: [CreateApplicationError!]
  query: Query!
}

type CreateComponentChange implements ComponentChange & Change {
  kind: String!
  component: Component
  componentVersion: Int!
}

type CreateComponentPayload {
  component: Component
  errors: [CreateComponentError!]
  query: Query!
}

type CreateEnvironmentPayload {
  environment: Environment
  errors: [CreateEnvironmentError!]
  query: Query!
}

type CreateVariableChange implements VariableChange & Change {
  variable: Variable
  variableVersion: Int!
  value: Variable
  kind: String!
}

type CreateVariablePayload {
  variable: Variable
  query: Query!
}

type DeleteVariableValueChange implements VariableChange & Change {
  variable: Variable
  variableVersion: Int!
  key: VariableKey!
  variableValue: VariableValue!
  kind: String!
}

type DeleteVariableValuePayload {
  value: VariableValue
  query: Query!
}

type DeployedEnvironment {
  environment: Environment
  claimedVersions("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): ClaimedVersionsConnection
}

"A connection to a list of items."
type DeploymentsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [DeploymentsEdge!]
  "A flattened list of the nodes."
  nodes: [DeployedEnvironment!]
}

"An edge in a connection."
type DeploymentsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: DeployedEnvironment!
}

type EncryptedValue {
  value: String!
  iv: String!
  topic: String!
}

type Environment implements Node {
  id: ID!
  name: String!
  parent: Environment
}

type EnvironmentCycleDetectedError implements IUserError {
  message: String!
  path: [String!]!
  code: String!
}

type EnvironmentNameCollisionError implements IUserError {
  name: String!
  code: String!
  message: String!
}

type EnvironmentNotFoundError implements IUserError {
  environmentId: UUID!
  code: String!
  message: String!
}

type Mutation {
  "Creates a new application configuration."
  createApplication(input: CreateApplicationInput!): CreateApplicationPayload!
  "Renames an application configuration."
  renameApplication(input: RenameApplicationInput!): RenameApplicationPayload!
  "Renames an application part of an application configuration."
  renameApplicationPart(input: RenameApplicationPartInput!): RenameApplicationPartPayload!
  "Adds a component to an application part."
  addComponentsToApplicationPart(input: AddComponentsToApplicationPartInput!): AddComponentsToApplicationPartPayload!
  "Adds a component to an application part."
  addPartToApplication(input: AddPartToApplicationInput!): AddPartToApplicationPayload!
  "Adds a component to an application part."
  removeApplicationPart(input: RemoveApplicationPartInput!): RemoveApplicationPartPayload!
  "Adds a component to an application part."
  removeComponentFromApplicationPart(input: RemoveComponentFromApplicationPartInput!): RemoveComponentFromApplicationPartPayload!
  updateApplicationPartComponentValues(input: UpdateApplicationPartComponentValuesInput!): UpdateApplicationPartComponentValuesPayload!
  createComponent(input: CreateComponentInput!): CreateComponentPayload!
  renameComponent(input: RenameComponentInput!): RenameComponentPayload!
  updateComponentSchema(input: UpdateComponentSchemaInput!): UpdateComponentSchemaPayload!
  updateComponentValues(input: UpdateComponentValuesInput!): UpdateComponentValuesPayload!
  createEnvironment(input: CreateEnvironmentInput!): CreateEnvironmentPayload!
  renameEnvironment(input: RenameEnvironmentInput!): RenameEnvironmentPayload!
  removeEnvironmentById(input: RemoveEnvironmentByIdInput!): RemoveEnvironmentByIdPayload!
  setParentOfEnvironment(input: SetParentOfEnvironmentInput!): SetParentOfEnvironmentPayload!
  createVariable(input: CreateVariableInput!): CreateVariablePayload!
  saveVariableValue(input: SaveVariableValueInput!): SaveVariableValuePayload!
  deleteVariableValue(input: DeleteVariableValueInput!): DeleteVariableValuePayload!
  renameVariable(input: RenameVariableInput!): RenameVariablePayload!
  publishApplicationPartById(input: PublishApplicationPartByIdInput!): PublishApplicationPartByIdPayload!
  claimVersion(input: ClaimVersionInput!): ClaimVersionPayload!
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

"A connection to a list of items."
type PublishApplicationPartByIdConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PublishApplicationPartByIdEdge!]
  "A flattened list of the nodes."
  nodes: [PublishedApplicationPart!]
}

"An edge in a connection."
type PublishApplicationPartByIdEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PublishedApplicationPart!
}

type PublishApplicationPartByIdPayload {
  publishedApplicationPart: PublishedApplicationPart
  errors: [PublishApplicationPartByIdError!]
  query: Query!
}

type PublishedApplicationPart implements Node {
  id: ID!
  version: Int!
  part: ApplicationPart!
  configuration: String!
  publishedAt: DateTime!
  publishedBy: UserInfo!
  claimsVersions: [ClaimedVersion!]!
}

type PublishedApplicationPartChange implements ApplicationPartChange & ApplicationChange & Change {
  kind: String!
  application: Application
  applicationVersion: Int!
  part: ApplicationPart
  partVersion: Int!
}

"A connection to a list of items."
type PublishedVersionsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PublishedVersionsEdge!]
  "A flattened list of the nodes."
  nodes: [PublishedApplicationPart!]
}

"An edge in a connection."
type PublishedVersionsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PublishedApplicationPart!
}

type PublishingError implements IUserError {
  message: String!
  code: String!
}

type Query {
  "Fetches an object given its ID."
  node("ID of the object." id: ID!): Node
  "Lookup nodes by a list of IDs."
  nodes("The list of node IDs." ids: [ID!]!): [Node]!
  "Get all application configurations."
  applications("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: ApplicationFilterInput): ApplicationsConnection
  "Get a specific application configuration by its ID."
  applicationById("The application ID." id: ID!): Application
  applicationPartById(id: ID!): ApplicationPart
  applicationPartComponentById(partComponentId: ID!): ApplicationPartComponent
  components("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: ComponentFilterInput): ComponentsConnection
  componentById(id: ID!): Component
  searchEnvironments(search: String "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): SearchEnvironmentsConnection
  environmentById(id: ID!): Environment
  variables: [Variable!]!
  searchVariables(search: String "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): SearchVariablesConnection
  variable(id: ID!): Variable
  variableValues(variableId: ID! applicationId: ID applicationPartId: ID): [VariableValue!]!
  globalVariableValues: [VariableValue!]!
  changeLogById(id: ID!): ChangeLog
}

type RemoveApplicationPartPayload {
  application: Application
  errors: [RemoveApplicationPartError!]
  query: Query!
}

type RemoveComponentChange implements ComponentChange & Change {
  kind: String!
  component: Component
  componentVersion: Int!
}

type RemoveComponentFromApplicationPartChange implements ApplicationPartComponentChange & ApplicationPartChange & ApplicationChange & Change {
  kind: String!
  application: Application
  applicationVersion: Int!
  part: ApplicationPart
  partVersion: Int!
  partComponent: ApplicationPartComponent
  partComponentVersion: Int!
  removedComponent: ApplicationPartComponent!
}

type RemoveComponentFromApplicationPartPayload {
  applicationPart: ApplicationPart
  errors: [RemoveComponentFromApplicationPartError!]
  query: Query!
}

type RemoveEnvironmentByIdPayload {
  environment: Environment
  errors: [RemoveEnvironmentByIdError!]
  query: Query!
}

type RemovePartFromApplicationChange implements ApplicationPartChange & ApplicationChange & Change {
  kind: String!
  application: Application
  removedPart: ApplicationPart!
  applicationVersion: Int!
  part: ApplicationPart
  partVersion: Int!
}

type RenameApplicationChange implements ApplicationChange & Change {
  kind: String!
  application: Application
  applicationVersion: Int!
  name: String!
}

type RenameApplicationPartChange implements ApplicationPartChange & ApplicationChange & Change {
  kind: String!
  application: Application
  applicationVersion: Int!
  part: ApplicationPart
  partVersion: Int!
  name: String!
}

type RenameApplicationPartPayload {
  applicationPart: ApplicationPart
  errors: [RenameApplicationPartError!]
  query: Query!
}

type RenameApplicationPayload {
  application: Application
  errors: [RenameApplicationError!]
  query: Query!
}

type RenameComponentChange implements ComponentChange & Change {
  kind: String!
  component: Component
  componentVersion: Int!
  name: String!
}

type RenameComponentPayload {
  component: Component
  query: Query!
}

type RenameEnvironmentPayload {
  environment: Environment
  errors: [RenameEnvironmentError!]
  query: Query!
}

type RenameVariableChange implements VariableChange & Change {
  variable: Variable
  variableVersion: Int!
  name: String!
  kind: String!
}

type RenameVariablePayload {
  variable: Variable
  query: Query!
}

type SaveVariableValuePayload {
  value: VariableValue
  query: Query!
}

type SchemaViolation {
  path: Any!
  code: String!
}

"A connection to a list of items."
type SearchEnvironmentsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [SearchEnvironmentsEdge!]
  "A flattened list of the nodes."
  nodes: [Environment!]
}

"An edge in a connection."
type SearchEnvironmentsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Environment!
}

"A connection to a list of items."
type SearchVariablesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [SearchVariablesEdge!]
  "A flattened list of the nodes."
  nodes: [Variable!]
}

"An edge in a connection."
type SearchVariablesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Variable!
}

type SetParentOfEnvironmentPayload {
  environment: Environment
  errors: [SetParentOfEnvironmentError!]
  query: Query!
}

type UpdateApplicationPartComponentValuesPayload {
  component: ApplicationPartComponent
  errors: [UpdateApplicationPartComponentValuesError!]
  query: Query!
}

type UpdateComponentSchemaPayload {
  component: Component
  query: Query!
}

type UpdateComponentValuesPayload {
  component: Component
  errors: [UpdateComponentValuesError!]
  query: Query!
}

type UserInfo {
  email: String
}

type ValueSchemaViolation implements IUserError {
  violations: [SchemaViolation!]!
  code: String!
  message: String!
}

type Variable implements Node {
  id: ID!
  state: VariableState!
  name: String!
  isSecret: Boolean!
  namespace: String!
  version: Int!
  changeLog: [ChangeLog!]!
  values: [VariableValue!]!
}

type VariableKey {
  variableId: UUID!
  applicationId: UUID
  partId: UUID
  environmentId: UUID
}

type VariableValue {
  id: ID!
  key: VariableKey!
  value: String
  version: Int!
  variable: Variable
  application: Application
  applicationPart: ApplicationPart
  environment: Environment
}

type VariableValueChange implements VariableChange & Change {
  variable: Variable
  variableVersion: Int!
  key: VariableKey!
  value: String
  encryptedValue: EncryptedValue
  kind: String!
}

union AddComponentsToApplicationPartError = ApplicationPartIdInvalid

union AddPartToApplicationError = ApplicationNotFoundError | ApplicationPartNameTaken

union ClaimVersionError = ClaimVersionFailedError

union CreateApplicationError = ApplicationNameTaken

union CreateComponentError = ValueSchemaViolation

union CreateEnvironmentError = EnvironmentNameCollisionError

union PublishApplicationPartByIdError = PublishingError

union RemoveApplicationPartError = ApplicationPartNotFoundError

union RemoveComponentFromApplicationPartError = ApplicationPartNotFoundError

union RemoveEnvironmentByIdError = EnvironmentNotFoundError

union RenameApplicationError = ApplicationIdInvalid | ApplicationNameTaken

union RenameApplicationPartError = ApplicationIdInvalid | ApplicationPartIdInvalid | ApplicationPartNameTaken

union RenameEnvironmentError = EnvironmentNotFoundError | EnvironmentNameCollisionError

union SetParentOfEnvironmentError = EnvironmentNotFoundError | EnvironmentCycleDetectedError

union UpdateApplicationPartComponentValuesError = ApplicationPartComponentNotFoundError | ComponentNotFoundError

union UpdateComponentValuesError = ValueSchemaViolation

input AddComponentsToApplicationPartInput {
  applicationPartId: ID!
  componentIds: [ID!]!
}

input AddPartToApplicationInput {
  partName: String!
  applicationId: ID!
}

input ApplicationFilterInput {
  and: [ApplicationFilterInput!]
  or: [ApplicationFilterInput!]
  name: StringOperationFilterInput
  namespace: StringOperationFilterInput
}

input ClaimVersionInput {
  gitVersion: String!
  applicationName: String!
  applicationPartName: String!
  environmentName: String!
}

input ComponentFilterInput {
  and: [ComponentFilterInput!]
  or: [ComponentFilterInput!]
  name: StringOperationFilterInput
}

input CreateApplicationInput {
  name: String!
  namespace: String!
  parts: [String!]
}

input CreateComponentInput {
  name: String!
  namespace: String!
  schema: String = "type Component { text: String! }"
  values: Any
}

input CreateEnvironmentInput {
  name: String!
}

input CreateVariableInput {
  name: String!
  isSecret: Boolean!
  namespace: String
  defaultValue: String
}

input DeleteVariableValueInput {
  id: ID!
}

input PublishApplicationPartByIdInput {
  applicationPartId: ID!
}

input RemoveApplicationPartInput {
  applicationPartId: ID!
}

input RemoveComponentFromApplicationPartInput {
  partComponentId: ID!
}

input RemoveEnvironmentByIdInput {
  id: ID!
}

input RenameApplicationInput {
  id: ID!
  name: String!
}

input RenameApplicationPartInput {
  applicationPartId: ID!
  name: String!
}

input RenameComponentInput {
  id: ID!
  name: String!
}

input RenameEnvironmentInput {
  id: ID!
  name: String!
}

input RenameVariableInput {
  id: ID!
  name: String!
}

input SaveVariableValueInput {
  variableId: ID!
  value: String!
  valueId: ID
  applicationId: ID
  partId: ID
  environmentId: ID
}

input SetParentOfEnvironmentInput {
  environmentId: ID!
  parentId: ID!
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input UpdateApplicationPartComponentValuesInput {
  partComponentId: ID!
  values: Any
}

input UpdateComponentSchemaInput {
  id: ID!
  schema: String!
}

input UpdateComponentValuesInput {
  id: ID!
  values: Any
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
}

enum ComponentState {
  ACTIVE
  DEPRECATED
}

enum VariableState {
  ACTIVE
  DEPRECATED
}

directive @authorize("The name of the authorization policy that determines access to the annotated resource." policy: String "Roles that are allowed to access the annotated resource." roles: [String!] "Defines when when the resolver shall be executed.By default the resolver is executed after the policy has determined that the current user is allowed to access the field." apply: ApplyPolicy! = BEFORE_RESOLVER) repeatable on SCHEMA | OBJECT | FIELD_DEFINITION

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer("If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to." label: String "Deferred when true." if: Boolean) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream("If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to." label: String "The initial elements that shall be send down to the consumer." initialCount: Int! = 0 "Streamed when true." if: Boolean) on FIELD

scalar Any

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

scalar SDL

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")
