schema {
  query: Query
  mutation: Mutation
}

type Application {
  id: Uuid!
  name: String!
  parts: [ApplicationPart!]!
}

type ApplicationPart {
  components: [Component]
  id: Uuid!
  name: String!
}

type ApplicationPartComponent {
  component: Component
}

type Component {
  id: Uuid!
  state: ComponentState!
  name: String!
  schema: String
}

type Mutation {
  Application_Add(input: AddApplicationInput!): UpdateApplicationPayload!
  ApplicationPart_Update(input: UpdateApplicationPartInput!): UpdateApplicationPayload!
  Variable_Add(input: AddVariableInput!): UpdateVariablePayload!
  Variable_SaveValue(input: SaveVariableValueInput!): UpdateVariableValuePayload!
  Component_Add(input: AddComponentInput!): UpdateComponentPayload!
  Component_UpdateSchema(input: UpdateComponentSchemaInput!): UpdateComponentPayload!
}

type Query {
  applications: [Application!]!
  variables: [Variable!]!
  variable(id: Uuid!): Variable!
  components: [Component!]!
}

type UpdateApplicationPayload {
  application: Application
  errors: [UserError!]
}

type UpdateComponentPayload {
  component: Component
  errors: [UserError!]
}

type UpdateVariablePayload {
  variable: Variable
  errors: [UserError!]
}

type UpdateVariableValuePayload {
  value: VariableValue
  errors: [UserError!]
}

type UserError {
  message: String!
  code: String!
}

type Variable {
  values: [VariableValue]
  id: Uuid!
  state: VariableState!
  name: String!
  isSecret: Boolean!
  namespace: String
}

type VariableEncryptionInfo {
  keyProvider: String!
  key: String!
  algorithm: String!
}

type VariableKey {
  variableId: Uuid
  applicationId: Uuid
  partId: Uuid
  environmentId: Uuid
}

type VariableValue {
  variable: Variable
  application: Application
  part: ApplicationPart
  id: Uuid!
  key: VariableKey!
  value: String!
  encryption: VariableEncryptionInfo
}

input AddApplicationInput {
  name: String!
  parts: [String!]
}

input AddComponentInput {
  name: String!
}

input AddVariableInput {
  name: String!
  isSecret: Boolean!
  namespace: String
  defaultValue: String
}

input SaveVariableValueInput {
  variableId: Uuid!
  value: String!
  valueId: Uuid
  applicationId: Uuid
  partId: Uuid
  environmentId: Uuid
}

input UpdateApplicationPartInput {
  applicationId: Uuid!
  partId: Uuid!
  name: String
  components: [Uuid!]
}

input UpdateComponentSchemaInput {
  id: Uuid!
  schema: String!
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
}

enum ComponentState {
  ACTIVE
  DEPRECATED
}

enum VariableState {
  ACTIVE
  DEPRECATED
}

directive @authorize("The name of the authorization policy that determines access to the annotated resource." policy: String "Roles that are allowed to access the annotated resource." roles: [String!] "Defines when when the resolver shall be executed.By default the resolver is executed after the policy has determined that the current user is allowed to access the field." apply: ApplyPolicy! = BEFORE_RESOLVER) repeatable on SCHEMA | OBJECT | FIELD_DEFINITION

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer("If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to." label: String "Deferred when true." if: Boolean) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema,such as deprecated fields on a type or deprecated enum values."
directive @deprecated("Deprecations include a reason for why it is deprecated, which is formatted using Markdown syntax (as specified by CommonMark)." reason: String = "No longer supported") on FIELD_DEFINITION | ENUM_VALUE

"Directs the executor to include this field or fragment only when the `if` argument is true."
directive @include("Included when true." if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if` argument is true."
directive @skip("Skipped when true." if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream("If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to." label: String "The initial elements that shall be send down to the consumer." initialCount: Int! "Streamed when true." if: Boolean!) on FIELD

scalar Uuid
