"""
The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`.
"""
directive @defer(
  """
  If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to.
  """
  label: String

  """
  Deferred when true.
  """
  if: Boolean
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`.
"""
directive @stream(
  """
  If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to.
  """
  label: String

  """
  The initial elements that shall be send down to the consumer.
  """
  initialCount: Int! = 0

  """
  Streamed when true.
  """
  if: Boolean
) on FIELD

"""
The `@oneOf` directive is used within the type system definition language
 to indicate:

 - an Input Object is a Oneof Input Object, or
 - an Object Type's Field is a Oneof Field.
"""
directive @oneOf on INPUT_OBJECT

directive @authorize(
  """
  The name of the authorization policy that determines access to the annotated resource.
  """
  policy: String

  """
  Roles that are allowed to access the annotated resource.
  """
  roles: [String!]

  """
  Defines when when the resolver shall be executed.By default the resolver is executed after the policy has determined that the current user is allowed to access the field.
  """
  apply: ApplyPolicy! = BEFORE_RESOLVER
) repeatable on SCHEMA | OBJECT | FIELD_DEFINITION

type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node

  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  apiKeys(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): ApiKeysConnection
  apiKeyById(id: ID!): ApiKey

  """
  Get all application configurations.
  """
  applications(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    where: ApplicationFilterInput
  ): ApplicationsConnection

  """
  Get a specific application configuration by its ID.
  """
  applicationById(
    """
    The application ID.
    """
    id: ID!
  ): Application
  applicationPartById(id: ID!): ApplicationPart
  applicationPartComponentById(partComponentId: ID!): ApplicationPartComponent
  components(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    where: ComponentFilterInput
  ): ComponentsConnection
  componentById(id: ID!): Component
  searchEnvironments(
    search: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): SearchEnvironmentsConnection
  environmentById(id: ID!): Environment
  variables: [Variable!]!
  searchVariables(
    search: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): SearchVariablesConnection
  variable(id: ID!): Variable
  variableValues(
    variableId: ID!
    applicationId: ID
    applicationPartId: ID
  ): [VariableValue!]!
  globalVariableValues: [VariableValue!]!
  changeLogById(id: ID!): ChangeLog
  searchRoles(
    search: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): SearchRolesConnection
  roleById(id: ID!): Role
  searchGroups(
    search: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): SearchGroupsConnection
  groupById(id: ID!): Group
  me: Viewer
}

type Mutation {
  createApiKey(input: CreateApiKeyInput!): CreateApiKeyPayload!
  updateApiKey(input: UpdateApiKeyInput!): UpdateApiKeyPayload!
  removeApiKeyById(input: RemoveApiKeyByIdInput!): RemoveApiKeyByIdPayload!

  """
  Creates a new application configuration.
  """
  createApplication(input: CreateApplicationInput!): CreateApplicationPayload!

  """
  Renames an application configuration.
  """
  renameApplication(input: RenameApplicationInput!): RenameApplicationPayload!

  """
  Renames an application part of an application configuration.
  """
  renameApplicationPart(
    input: RenameApplicationPartInput!
  ): RenameApplicationPartPayload!

  """
  Adds a component to an application part.
  """
  addComponentsToApplicationPart(
    input: AddComponentsToApplicationPartInput!
  ): AddComponentsToApplicationPartPayload!

  """
  Adds a component to an application part.
  """
  addPartToApplication(
    input: AddPartToApplicationInput!
  ): AddPartToApplicationPayload!

  """
  Adds a component to an application part.
  """
  removeApplicationPart(
    input: RemoveApplicationPartInput!
  ): RemoveApplicationPartPayload!

  """
  Adds a component to an application part.
  """
  removeComponentFromApplicationPart(
    input: RemoveComponentFromApplicationPartInput!
  ): RemoveComponentFromApplicationPartPayload!
  updateApplicationPartComponentValues(
    input: UpdateApplicationPartComponentValuesInput!
  ): UpdateApplicationPartComponentValuesPayload!
  createComponent(input: CreateComponentInput!): CreateComponentPayload!
  renameComponent(input: RenameComponentInput!): RenameComponentPayload!
  updateComponentSchema(
    input: UpdateComponentSchemaInput!
  ): UpdateComponentSchemaPayload!
  updateComponentValues(
    input: UpdateComponentValuesInput!
  ): UpdateComponentValuesPayload!
  createEnvironment(input: CreateEnvironmentInput!): CreateEnvironmentPayload!
  renameEnvironment(input: RenameEnvironmentInput!): RenameEnvironmentPayload!
  removeEnvironmentById(
    input: RemoveEnvironmentByIdInput!
  ): RemoveEnvironmentByIdPayload!
  setParentOfEnvironment(
    input: SetParentOfEnvironmentInput!
  ): SetParentOfEnvironmentPayload!
  createVariable(input: CreateVariableInput!): CreateVariablePayload!
  saveVariableValue(input: SaveVariableValueInput!): SaveVariableValuePayload!
  deleteVariableValue(
    input: DeleteVariableValueInput!
  ): DeleteVariableValuePayload!
  renameVariable(input: RenameVariableInput!): RenameVariablePayload!
  publishApplicationPartById(
    input: PublishApplicationPartByIdInput!
  ): PublishApplicationPartByIdPayload!
  claimVersion(input: ClaimVersionInput!): ClaimVersionPayload!
  createRole(input: CreateRoleInput!): CreateRolePayload!
  renameRole(input: RenameRoleInput!): RenameRolePayload!
  changeRolePermissions(
    input: ChangeRolePermissionsInput!
  ): ChangeRolePermissionsPayload!
  removeRoleById(input: RemoveRoleByIdInput!): RemoveRoleByIdPayload!
  createGroup(input: CreateGroupInput!): CreateGroupPayload!
  renameGroup(input: RenameGroupInput!): RenameGroupPayload!
  updateGroupRequirements(
    input: UpdateGroupRequirementsInput!
  ): UpdateGroupRequirementsPayload!
  updateGroupRoles(input: UpdateGroupRolesInput!): UpdateGroupRolesPayload!
  removeGroupById(input: RemoveGroupByIdInput!): RemoveGroupByIdPayload!
}

scalar SDL

interface UserError {
  code: String!
  message: String!
}

interface ApplicationPartChange implements ApplicationChange & Change {
  part: ApplicationPart
  partVersion: Int!
  application: Application
  applicationVersion: Int!
  kind: String!
}

interface ApplicationChange implements Change {
  application: Application
  applicationVersion: Int!
  kind: String!
}

interface ApplicationPartComponentChange implements ApplicationPartChange & ApplicationChange & Change {
  partComponent: ApplicationPartComponent
  partComponentVersion: Int!
  part: ApplicationPart
  partVersion: Int!
  application: Application
  applicationVersion: Int!
  kind: String!
}

type SchemaViolation {
  path: Any!
  code: String!
}

interface ComponentChange implements Change {
  component: Component
  componentVersion: Int!
  kind: String!
}

interface VariableChange implements Change {
  variable: Variable
  variableVersion: Int!
  kind: String!
}

interface Change {
  kind: String!
}

"""
The node interface is implemented by entities that have a global unique identifier.
"""
interface Node {
  id: ID!
}

scalar Any

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
}

type CreateApplicationChange implements ApplicationChange & Change {
  application: Application!
  kind: String!
  applicationVersion: Int!
}

type RenameApplicationChange implements ApplicationChange & Change {
  name: String!
  kind: String!
  application: Application
  applicationVersion: Int!
}

type RenameApplicationPartChange implements ApplicationPartChange & ApplicationChange & Change {
  name: String!
  kind: String!
  application: Application
  applicationVersion: Int!
  part: ApplicationPart
  partVersion: Int!
}

type AddComponentToApplicationPartChange implements ApplicationPartComponentChange & ApplicationPartChange & ApplicationChange & Change {
  addedComponent: ApplicationPartComponent!
  kind: String!
  application: Application
  applicationVersion: Int!
  part: ApplicationPart
  partVersion: Int!
  partComponent: ApplicationPartComponent
  partComponentVersion: Int!
}

type AddPartToApplicationChange implements ApplicationPartChange & ApplicationChange & Change {
  addedPart: ApplicationPart!
  kind: String!
  application: Application
  applicationVersion: Int!
  part: ApplicationPart
  partVersion: Int!
}

type PublishedApplicationPartChange implements ApplicationPartChange & ApplicationChange & Change {
  kind: String!
  application: Application
  applicationVersion: Int!
  part: ApplicationPart
  partVersion: Int!
}

type RemovePartFromApplicationChange implements ApplicationPartChange & ApplicationChange & Change {
  removedPart: ApplicationPart!
  kind: String!
  application: Application
  applicationVersion: Int!
  part: ApplicationPart
  partVersion: Int!
}

type RemoveComponentFromApplicationPartChange implements ApplicationPartComponentChange & ApplicationPartChange & ApplicationChange & Change {
  removedComponent: ApplicationPartComponent!
  kind: String!
  application: Application
  applicationVersion: Int!
  part: ApplicationPart
  partVersion: Int!
  partComponent: ApplicationPartComponent
  partComponentVersion: Int!
}

type ApplicationPartComponentValuesChange implements ApplicationPartComponentChange & ApplicationPartChange & ApplicationChange & Change {
  values: String
  kind: String!
  application: Application
  applicationVersion: Int!
  part: ApplicationPart
  partVersion: Int!
  partComponent: ApplicationPartComponent
  partComponentVersion: Int!
}

type CreateComponentChange implements ComponentChange & Change {
  kind: String!
  component: Component
  componentVersion: Int!
}

type RemoveComponentChange implements ComponentChange & Change {
  kind: String!
  component: Component
  componentVersion: Int!
}

type RenameComponentChange implements ComponentChange & Change {
  name: String!
  kind: String!
  component: Component
  componentVersion: Int!
}

type ComponentSchemaChange implements ComponentChange & Change {
  schema: String!
  kind: String!
  component: Component
  componentVersion: Int!
}

type ComponentValuesChange implements ComponentChange & Change {
  values: String!
  kind: String!
  component: Component
  componentVersion: Int!
}

type CreateVariableChange implements VariableChange & Change {
  value: Variable
  variable: Variable
  variableVersion: Int!
  kind: String!
}

type RenameVariableChange implements VariableChange & Change {
  name: String!
  variable: Variable
  variableVersion: Int!
  kind: String!
}

type DeleteVariableValueChange implements VariableChange & Change {
  key: VariableKey!
  variableValue: VariableValue!
  variable: Variable
  variableVersion: Int!
  kind: String!
}

type VariableValueChange implements VariableChange & Change {
  key: VariableKey!
  value: String
  encryptedValue: EncryptedValue
  variable: Variable
  variableVersion: Int!
  kind: String!
}

type ClaimRequirement {
  type: String!
  value: String!
}

type ApplicationPart implements Node {
  id: ID!
  name: String!
  version: Int!
  components: [ApplicationPartComponent!]!
  application: Application
  variableValues: [VariableValue!]!
  changeLog: [ChangeLog!]!
  publishedVersions(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): PublishedVersionsConnection
  deployments(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): DeploymentsConnection
  publishApplicationPartById(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): PublishApplicationPartByIdConnection
}

type Application implements Node {
  id: ID!
  name: String!
  namespace: String!
  version: Int!
  parts: [ApplicationPart!]!
  variableValues: [VariableValue!]!
  changeLog: [ChangeLog!]!
}

type ApplicationPartComponent {
  id: ID!
  version: Int!
  definition: Component
  applicationPart: ApplicationPart
  values(version: Int): String
  changeLog: [ChangeLog!]!
}

type Component implements Node {
  id: ID!
  name: String!
  namespace: String!
  version: Int!
  state: ComponentState!
  changeLog: [ChangeLog!]!
  schemaSdl: SDL
  schema: Any
  values: Any
  defaults: Any
  schemaViolations: [SchemaViolation!]!
}

type Variable implements Node {
  id: ID!
  state: VariableState!
  name: String!
  isSecret: Boolean!
  namespace: String!
  version: Int!
  changeLog: [ChangeLog!]!
  values: [VariableValue!]!
}

"""
A connection to a list of items.
"""
type ApiKeysConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [ApiKeysEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [ApiKey!]
}

type UnauthorizedOperationError implements UserError {
  message: String!
  code: String!
}

input ApplicationFilterInput {
  and: [ApplicationFilterInput!]
  or: [ApplicationFilterInput!]
  name: StringOperationFilterInput
  namespace: StringOperationFilterInput
}

"""
A connection to a list of items.
"""
type ApplicationsConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [ApplicationsEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [Application!]
}

type ApplicationNameTaken implements UserError {
  applicationName: String!
  code: String!
  message: String!
}

type ApplicationIdInvalid implements UserError {
  applicationId: ID!
  code: String!
  message: String!
}

type ApplicationPartIdInvalid implements UserError {
  code: String!
  message: String!
  applicationPartId: ID!
}

type ApplicationPartNameTaken implements UserError {
  applicationName: String!
  code: String!
  message: String!
}

type ApplicationNotFoundError implements UserError {
  applicationId: ID!
  code: String!
  message: String!
}

type ApplicationPartNotFoundError implements UserError {
  applicationPartId: ID!
  code: String!
  message: String!
}

type ApplicationPartComponentNotFoundError implements UserError {
  componentPartId: ID!
  code: String!
  message: String!
}

type ComponentNotFoundError implements UserError {
  componentId: ID!
  code: String!
  message: String!
}

"""
A connection to a list of items.
"""
type PublishedVersionsConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [PublishedVersionsEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [PublishedApplicationPart!]
}

"""
A connection to a list of items.
"""
type DeploymentsConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [DeploymentsEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [DeployedEnvironment!]
}

input ComponentFilterInput {
  and: [ComponentFilterInput!]
  or: [ComponentFilterInput!]
  name: StringOperationFilterInput
}

"""
A connection to a list of items.
"""
type ComponentsConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [ComponentsEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [Component!]
}

type ValueSchemaViolation implements UserError {
  violations: [SchemaViolation!]!
  code: String!
  message: String!
}

type SchemaInvalidError implements UserError {
  code: String!
  message: String!
}

"""
A connection to a list of items.
"""
type SearchEnvironmentsConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [SearchEnvironmentsEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [Environment!]
}

type EnvironmentNameCollisionError implements UserError {
  name: String!
  code: String!
  message: String!
}

type EnvironmentNotFoundError implements UserError {
  environmentId: ID!
  code: String!
  message: String!
}

type EnvironmentCycleDetectedError implements UserError {
  message: String!
  path: [String!]!
  code: String!
}

"""
A connection to a list of items.
"""
type SearchVariablesConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [SearchVariablesEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [Variable!]
}

type PublishingError implements UserError {
  message: String!
  code: String!
}

type ClaimVersionFailedError implements UserError {
  message: String!
  code: String!
}

"""
A connection to a list of items.
"""
type PublishApplicationPartByIdConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [PublishApplicationPartByIdEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [PublishedApplicationPart!]
}

"""
A connection to a list of items.
"""
type SearchRolesConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [SearchRolesEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [Role!]
}

"""
A connection to a list of items.
"""
type SearchGroupsConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [SearchGroupsEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [Group!]
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  Indicates whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Indicates whether more edges exist prior the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type ApiKey {
  id: ID!
  name: String!
  roles: [RoleScope!]!
}

"""
An edge in a connection.
"""
type ApiKeysEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ApiKey!
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

"""
An edge in a connection.
"""
type ApplicationsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Application!
}

type PublishedApplicationPart implements Node {
  id: ID!
  version: Int!
  part: ApplicationPart!
  configuration: String!
  publishedAt: DateTime!
  publishedBy: UserInfo!
  claimsVersions: [ClaimedVersion!]!
}

"""
An edge in a connection.
"""
type PublishedVersionsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublishedApplicationPart!
}

type DeployedEnvironment {
  environment: Environment
  claimedVersions(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): ClaimedVersionsConnection
}

"""
An edge in a connection.
"""
type DeploymentsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DeployedEnvironment!
}

"""
An edge in a connection.
"""
type ComponentsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Component!
}

type Environment implements Node {
  id: ID!
  name: String!
  parent: Environment
}

"""
An edge in a connection.
"""
type SearchEnvironmentsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Environment!
}

"""
An edge in a connection.
"""
type SearchVariablesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Variable!
}

"""
An edge in a connection.
"""
type PublishApplicationPartByIdEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublishedApplicationPart!
}

type Role {
  id: ID!
  name: String!
  permissions: [Permission!]!
}

"""
An edge in a connection.
"""
type SearchRolesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Role!
}

type Group {
  id: ID!
  name: String!
  requirements: [Requirement!]!
  roles: [RoleScope!]!
}

"""
An edge in a connection.
"""
type SearchGroupsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Group!
}

"""
A connection to a list of items.
"""
type ClaimedVersionsConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [ClaimedVersionsEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [ClaimedVersion!]
}

type ClaimedVersion {
  id: ID!
  tag: String!
  claimedAt: DateTime!
  application: Application
  applicationPart: ApplicationPart
  environment: Environment
  publishedApplicationPart: PublishedApplicationPart
  token: String
}

"""
An edge in a connection.
"""
type ClaimedVersionsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ClaimedVersion!
}

enum VariableState {
  ACTIVE
  DEPRECATED
}

enum ComponentState {
  ACTIVE
  DEPRECATED
}

scalar UUID

type Viewer {
  name: String!
  groups: [Group!]!
  namespaces: [String!]!
}

input RequirementInput {
  claimRequirement: ClaimRequirementInput
}

type RoleScope {
  namespace: String!
  roles: [Role!]!
}

input PermissionsFlagsInput {
  isRead: Boolean
  isWrite: Boolean
  isClaim: Boolean
  isPublish: Boolean
  isDecrypt: Boolean
}

input PermissionInput {
  scope: Scope!
  permissions: PermissionsFlagsInput!
}

"""
The `DateTime` scalar represents an ISO-8601 compliant date time type.
"""
scalar DateTime

type PermissionsFlags {
  isRead: Boolean!
  isWrite: Boolean!
  isClaim: Boolean!
  isPublish: Boolean!
  isDecrypt: Boolean!
}

type Permission {
  scope: Scope!
  permissions: PermissionsFlags!
}

type EncryptedValue {
  value: String!
  iv: String!
  topic: String!
}

type VariableKey {
  variableId: ID!
  applicationId: ID
  partId: ID
  environmentId: ID
}

type UserInfo {
  email: String
}

type ChangeLog {
  id: ID!
  change: Change!
  modifiedBy: UserInfo!
  modifiedAt: DateTime!
}

type VariableValue {
  id: ID!
  key: VariableKey!
  value: String
  version: Int!
  variable: Variable
  application: Application
  applicationPart: ApplicationPart
  environment: Environment
}

input RoleScopeInput {
  namespace: String!
  roleIds: [ID!]!
}

type ApiKeyWithSecret {
  key: ApiKey!
  secret: String!
}

union Requirement = ClaimRequirement

enum Scope {
  CONFIGURATION
  APPLICATION
  VARIABLE
  IDENTITY
  COMPONENT
  ENVIRONMENT
}

input ClaimRequirementInput {
  type: String!
  value: String!
}

input CreateApiKeyInput {
  name: String!
  roles: [RoleScopeInput!]!
}

union CreateApiKeyError = UnauthorizedOperationError

type CreateApiKeyPayload {
  apiKeyWithSecret: ApiKeyWithSecret
  errors: [CreateApiKeyError!]
  query: Query!
}

input UpdateApiKeyInput {
  id: ID!
  roles: [RoleScopeInput!]!
}

union UpdateApiKeyError = UnauthorizedOperationError

type UpdateApiKeyPayload {
  apiKey: ApiKey
  errors: [UpdateApiKeyError!]
  query: Query!
}

input RemoveApiKeyByIdInput {
  id: ID!
}

union RemoveApiKeyByIdError = UnauthorizedOperationError

type RemoveApiKeyByIdPayload {
  apiKey: ApiKey
  errors: [RemoveApiKeyByIdError!]
  query: Query!
}

input CreateApplicationInput {
  name: String!
  namespace: String!
  parts: [String!]
}

union CreateApplicationError = ApplicationNameTaken | UnauthorizedOperationError

type CreateApplicationPayload {
  application: Application
  errors: [CreateApplicationError!]
  query: Query!
}

input RenameApplicationInput {
  id: ID!
  name: String!
}

union RenameApplicationError =
    ApplicationIdInvalid
  | ApplicationNameTaken
  | UnauthorizedOperationError

type RenameApplicationPayload {
  application: Application
  errors: [RenameApplicationError!]
  query: Query!
}

input RenameApplicationPartInput {
  applicationPartId: ID!
  name: String!
}

union RenameApplicationPartError =
    ApplicationIdInvalid
  | ApplicationPartIdInvalid
  | ApplicationPartNameTaken
  | UnauthorizedOperationError

type RenameApplicationPartPayload {
  applicationPart: ApplicationPart
  errors: [RenameApplicationPartError!]
  query: Query!
}

input AddComponentsToApplicationPartInput {
  applicationPartId: ID!
  componentIds: [ID!]!
}

union AddComponentsToApplicationPartError =
    ApplicationPartIdInvalid
  | UnauthorizedOperationError

type AddComponentsToApplicationPartPayload {
  applicationPart: ApplicationPart
  errors: [AddComponentsToApplicationPartError!]
  query: Query!
}

input AddPartToApplicationInput {
  partName: String!
  applicationId: ID!
}

union AddPartToApplicationError =
    ApplicationNotFoundError
  | ApplicationPartNameTaken
  | UnauthorizedOperationError

type AddPartToApplicationPayload {
  application: Application
  errors: [AddPartToApplicationError!]
  query: Query!
}

input RemoveApplicationPartInput {
  applicationPartId: ID!
}

union RemoveApplicationPartError =
    ApplicationPartNotFoundError
  | UnauthorizedOperationError

type RemoveApplicationPartPayload {
  application: Application
  errors: [RemoveApplicationPartError!]
  query: Query!
}

input RemoveComponentFromApplicationPartInput {
  partComponentId: ID!
}

union RemoveComponentFromApplicationPartError =
    ApplicationPartNotFoundError
  | UnauthorizedOperationError

type RemoveComponentFromApplicationPartPayload {
  applicationPart: ApplicationPart
  errors: [RemoveComponentFromApplicationPartError!]
  query: Query!
}

input UpdateApplicationPartComponentValuesInput {
  partComponentId: ID!
  values: Any
}

union UpdateApplicationPartComponentValuesError =
    ApplicationPartComponentNotFoundError
  | ComponentNotFoundError
  | UnauthorizedOperationError

type UpdateApplicationPartComponentValuesPayload {
  component: ApplicationPartComponent
  errors: [UpdateApplicationPartComponentValuesError!]
  query: Query!
}

input CreateComponentInput {
  name: String!
  namespace: String!
  schema: String = "type Component { text: String! }"
  values: Any
}

union CreateComponentError = ValueSchemaViolation | UnauthorizedOperationError

type CreateComponentPayload {
  component: Component
  errors: [CreateComponentError!]
  query: Query!
}

input RenameComponentInput {
  id: ID!
  name: String!
}

union RenameComponentError = UnauthorizedOperationError

type RenameComponentPayload {
  component: Component
  errors: [RenameComponentError!]
  query: Query!
}

input UpdateComponentSchemaInput {
  id: ID!
  schema: String!
}

union UpdateComponentSchemaError =
    UnauthorizedOperationError
  | SchemaInvalidError

type UpdateComponentSchemaPayload {
  component: Component
  errors: [UpdateComponentSchemaError!]
  query: Query!
}

input UpdateComponentValuesInput {
  id: ID!
  values: Any
}

union UpdateComponentValuesError =
    ValueSchemaViolation
  | UnauthorizedOperationError

type UpdateComponentValuesPayload {
  component: Component
  errors: [UpdateComponentValuesError!]
  query: Query!
}

input CreateEnvironmentInput {
  name: String!
}

union CreateEnvironmentError =
    EnvironmentNameCollisionError
  | UnauthorizedOperationError

type CreateEnvironmentPayload {
  environment: Environment
  errors: [CreateEnvironmentError!]
  query: Query!
}

input RenameEnvironmentInput {
  id: ID!
  name: String!
}

union RenameEnvironmentError =
    EnvironmentNotFoundError
  | EnvironmentNameCollisionError
  | UnauthorizedOperationError

type RenameEnvironmentPayload {
  environment: Environment
  errors: [RenameEnvironmentError!]
  query: Query!
}

input RemoveEnvironmentByIdInput {
  id: ID!
}

union RemoveEnvironmentByIdError =
    EnvironmentNotFoundError
  | UnauthorizedOperationError

type RemoveEnvironmentByIdPayload {
  environment: Environment
  errors: [RemoveEnvironmentByIdError!]
  query: Query!
}

input SetParentOfEnvironmentInput {
  environmentId: ID!
  parentId: ID!
}

union SetParentOfEnvironmentError =
    EnvironmentNotFoundError
  | EnvironmentCycleDetectedError
  | UnauthorizedOperationError

type SetParentOfEnvironmentPayload {
  environment: Environment
  errors: [SetParentOfEnvironmentError!]
  query: Query!
}

input CreateVariableInput {
  name: String!
  isSecret: Boolean!
  namespace: String!
  defaultValue: String
}

union CreateVariableError = UnauthorizedOperationError

type CreateVariablePayload {
  variable: Variable
  errors: [CreateVariableError!]
  query: Query!
}

input SaveVariableValueInput {
  variableId: ID!
  value: String!
  valueId: ID
  applicationId: ID
  partId: ID
  environmentId: ID
}

union SaveVariableValueError = UnauthorizedOperationError

type SaveVariableValuePayload {
  value: VariableValue
  errors: [SaveVariableValueError!]
  query: Query!
}

input DeleteVariableValueInput {
  id: ID!
}

union DeleteVariableValueError = UnauthorizedOperationError

type DeleteVariableValuePayload {
  value: VariableValue
  errors: [DeleteVariableValueError!]
  query: Query!
}

input RenameVariableInput {
  id: ID!
  name: String!
}

union RenameVariableError = UnauthorizedOperationError

type RenameVariablePayload {
  variable: Variable
  errors: [RenameVariableError!]
  query: Query!
}

input PublishApplicationPartByIdInput {
  applicationPartId: ID!
}

union PublishApplicationPartByIdError =
    PublishingError
  | UnauthorizedOperationError

type PublishApplicationPartByIdPayload {
  publishedApplicationPart: PublishedApplicationPart
  errors: [PublishApplicationPartByIdError!]
  query: Query!
}

input ClaimVersionInput {
  tag: String!
  applicationName: String!
  applicationPartName: String!
  environmentName: String!
}

union ClaimVersionError = ClaimVersionFailedError | UnauthorizedOperationError

type ClaimVersionPayload {
  claimedVersion: ClaimedVersion
  errors: [ClaimVersionError!]
  query: Query!
}

input CreateRoleInput {
  name: String!
  permissions: [PermissionInput!]!
}

union CreateRoleError = UnauthorizedOperationError

type CreateRolePayload {
  role: Role
  errors: [CreateRoleError!]
  query: Query!
}

input RenameRoleInput {
  id: ID!
  name: String!
}

union RenameRoleError = UnauthorizedOperationError

type RenameRolePayload {
  role: Role
  errors: [RenameRoleError!]
  query: Query!
}

input ChangeRolePermissionsInput {
  id: ID!
  permissions: [PermissionInput!]!
}

union ChangeRolePermissionsError = UnauthorizedOperationError

type ChangeRolePermissionsPayload {
  role: Role
  errors: [ChangeRolePermissionsError!]
  query: Query!
}

input RemoveRoleByIdInput {
  id: ID!
}

union RemoveRoleByIdError = UnauthorizedOperationError

type RemoveRoleByIdPayload {
  role: Role
  errors: [RemoveRoleByIdError!]
  query: Query!
}

input CreateGroupInput {
  name: String!
  requirements: [RequirementInput!]!
  roles: [RoleScopeInput!]!
}

union CreateGroupError = UnauthorizedOperationError

type CreateGroupPayload {
  group: Group
  errors: [CreateGroupError!]
  query: Query!
}

input RenameGroupInput {
  id: ID!
  name: String!
}

union RenameGroupError = UnauthorizedOperationError

type RenameGroupPayload {
  group: Group
  errors: [RenameGroupError!]
  query: Query!
}

input UpdateGroupRequirementsInput {
  id: ID!
  requirements: [RequirementInput!]!
}

union UpdateGroupRequirementsError = UnauthorizedOperationError

type UpdateGroupRequirementsPayload {
  group: Group
  errors: [UpdateGroupRequirementsError!]
  query: Query!
}

input UpdateGroupRolesInput {
  id: ID!
  roles: [RoleScopeInput!]!
}

union UpdateGroupRolesError = UnauthorizedOperationError

type UpdateGroupRolesPayload {
  group: Group
  errors: [UpdateGroupRolesError!]
  query: Query!
}

input RemoveGroupByIdInput {
  id: ID!
}

union RemoveGroupByIdError = UnauthorizedOperationError

type RemoveGroupByIdPayload {
  group: Group
  errors: [RemoveGroupByIdError!]
  query: Query!
}
